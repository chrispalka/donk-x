"use strict";

var webpack = require('webpack');

var HtmlWebpackPlugin = require("html-webpack-plugin");

var CopyWebpackPlugin = require('copy-webpack-plugin');

var path = require('path');

var SRC_DIR = path.join(__dirname, '/public/src');
var DIST_DIR = path.join(__dirname, '/public/dist');
module.exports = {
  entry: "".concat(SRC_DIR, "/index.js"),
  output: {
    filename: '[name].bundle.js',
    path: DIST_DIR
  },
  node: {
    fs: 'empty',
    net: 'empty',
    tls: 'empty'
  },
  plugins: [new HtmlWebpackPlugin({
    template: './public/src/index.html',
    filename: 'index.html'
  }), new CopyWebpackPlugin({
    patterns: [{
      from: './assets',
      to: 'assets'
    }]
  }), new webpack.ProvidePlugin({
    $: 'jquery',
    jQuery: 'jquery',
    'window.jQuery': 'jquery',
    Popper: ['popper.js', 'default']
  })],
  module: {
    rules: [{
      test: /\.css$/,
      use: ['style-loader', 'css-loader']
    }, {
      test: /\.(js|jsx)$/,
      exclude: /node_modules/,
      use: {
        loader: 'babel-loader'
      }
    }, {
      test: /\.html$/,
      use: {
        loader: 'html-loader'
      }
    }]
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3dlYnBhY2suY29uZmlnLmpzIl0sIm5hbWVzIjpbIndlYnBhY2siLCJyZXF1aXJlIiwiSHRtbFdlYnBhY2tQbHVnaW4iLCJDb3B5V2VicGFja1BsdWdpbiIsInBhdGgiLCJTUkNfRElSIiwiam9pbiIsIl9fZGlybmFtZSIsIkRJU1RfRElSIiwibW9kdWxlIiwiZXhwb3J0cyIsImVudHJ5Iiwib3V0cHV0IiwiZmlsZW5hbWUiLCJub2RlIiwiZnMiLCJuZXQiLCJ0bHMiLCJwbHVnaW5zIiwidGVtcGxhdGUiLCJwYXR0ZXJucyIsImZyb20iLCJ0byIsIlByb3ZpZGVQbHVnaW4iLCIkIiwialF1ZXJ5IiwiUG9wcGVyIiwicnVsZXMiLCJ0ZXN0IiwidXNlIiwiZXhjbHVkZSIsImxvYWRlciJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLElBQU1DLGlCQUFpQixHQUFHRCxPQUFPLENBQUMscUJBQUQsQ0FBakM7O0FBQ0EsSUFBTUUsaUJBQWlCLEdBQUdGLE9BQU8sQ0FBQyxxQkFBRCxDQUFqQzs7QUFDQSxJQUFNRyxJQUFJLEdBQUdILE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLElBQU1JLE9BQU8sR0FBR0QsSUFBSSxDQUFDRSxJQUFMLENBQVVDLFNBQVYsRUFBcUIsYUFBckIsQ0FBaEI7QUFDQSxJQUFNQyxRQUFRLEdBQUdKLElBQUksQ0FBQ0UsSUFBTCxDQUFVQyxTQUFWLEVBQXFCLGNBQXJCLENBQWpCO0FBRUFFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmQyxFQUFBQSxLQUFLLFlBQUtOLE9BQUwsY0FEVTtBQUVmTyxFQUFBQSxNQUFNLEVBQUU7QUFDTkMsSUFBQUEsUUFBUSxFQUFFLGtCQURKO0FBRU5ULElBQUFBLElBQUksRUFBRUk7QUFGQSxHQUZPO0FBTWZNLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxFQUFFLEVBQUUsT0FEQTtBQUVKQyxJQUFBQSxHQUFHLEVBQUUsT0FGRDtBQUdKQyxJQUFBQSxHQUFHLEVBQUU7QUFIRCxHQU5TO0FBV2ZDLEVBQUFBLE9BQU8sRUFBRSxDQUNQLElBQUloQixpQkFBSixDQUFzQjtBQUNwQmlCLElBQUFBLFFBQVEsRUFBRSx5QkFEVTtBQUVwQk4sSUFBQUEsUUFBUSxFQUFFO0FBRlUsR0FBdEIsQ0FETyxFQUtQLElBQUlWLGlCQUFKLENBQXNCO0FBQ3BCaUIsSUFBQUEsUUFBUSxFQUFFLENBQ047QUFBQ0MsTUFBQUEsSUFBSSxFQUFFLFVBQVA7QUFBbUJDLE1BQUFBLEVBQUUsRUFBRTtBQUF2QixLQURNO0FBRFUsR0FBdEIsQ0FMTyxFQVVQLElBQUl0QixPQUFPLENBQUN1QixhQUFaLENBQTBCO0FBQ3hCQyxJQUFBQSxDQUFDLEVBQUUsUUFEcUI7QUFFeEJDLElBQUFBLE1BQU0sRUFBRSxRQUZnQjtBQUd4QixxQkFBaUIsUUFITztBQUl4QkMsSUFBQUEsTUFBTSxFQUFFLENBQUMsV0FBRCxFQUFjLFNBQWQ7QUFKZ0IsR0FBMUIsQ0FWTyxDQVhNO0FBNEJmakIsRUFBQUEsTUFBTSxFQUFFO0FBQ05rQixJQUFBQSxLQUFLLEVBQUUsQ0FDTDtBQUNFQyxNQUFBQSxJQUFJLEVBQUUsUUFEUjtBQUVFQyxNQUFBQSxHQUFHLEVBQUUsQ0FBQyxjQUFELEVBQWlCLFlBQWpCO0FBRlAsS0FESyxFQUtMO0FBQ0VELE1BQUFBLElBQUksRUFBRSxhQURSO0FBRUVFLE1BQUFBLE9BQU8sRUFBRSxjQUZYO0FBR0VELE1BQUFBLEdBQUcsRUFBRTtBQUNIRSxRQUFBQSxNQUFNLEVBQUU7QUFETDtBQUhQLEtBTEssRUFZTDtBQUNFSCxNQUFBQSxJQUFJLEVBQUUsU0FEUjtBQUVFQyxNQUFBQSxHQUFHLEVBQUU7QUFDSEUsUUFBQUEsTUFBTSxFQUFFO0FBREw7QUFGUCxLQVpLO0FBREQ7QUE1Qk8sQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB3ZWJwYWNrID0gcmVxdWlyZSgnd2VicGFjaycpO1xuY29uc3QgSHRtbFdlYnBhY2tQbHVnaW4gPSByZXF1aXJlKFwiaHRtbC13ZWJwYWNrLXBsdWdpblwiKTtcbmNvbnN0IENvcHlXZWJwYWNrUGx1Z2luID0gcmVxdWlyZSgnY29weS13ZWJwYWNrLXBsdWdpbicpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IFNSQ19ESVIgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnL3B1YmxpYy9zcmMnKTtcbmNvbnN0IERJU1RfRElSID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy9wdWJsaWMvZGlzdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZW50cnk6IGAke1NSQ19ESVJ9L2luZGV4LmpzYCxcbiAgb3V0cHV0OiB7XG4gICAgZmlsZW5hbWU6ICdbbmFtZV0uYnVuZGxlLmpzJyxcbiAgICBwYXRoOiBESVNUX0RJUlxuICB9LFxuICBub2RlOiB7XG4gICAgZnM6ICdlbXB0eScsXG4gICAgbmV0OiAnZW1wdHknLFxuICAgIHRsczogJ2VtcHR5J1xuICB9LFxuICBwbHVnaW5zOiBbXG4gICAgbmV3IEh0bWxXZWJwYWNrUGx1Z2luKHtcbiAgICAgIHRlbXBsYXRlOiAnLi9wdWJsaWMvc3JjL2luZGV4Lmh0bWwnLFxuICAgICAgZmlsZW5hbWU6ICdpbmRleC5odG1sJ1xuICAgIH0pLFxuICAgIG5ldyBDb3B5V2VicGFja1BsdWdpbih7XG4gICAgICBwYXR0ZXJuczogW1xuICAgICAgICAgIHtmcm9tOiAnLi9hc3NldHMnLCB0bzogJ2Fzc2V0cyd9XG4gICAgICBdXG4gICAgfSksXG4gICAgbmV3IHdlYnBhY2suUHJvdmlkZVBsdWdpbih7XG4gICAgICAkOiAnanF1ZXJ5JyxcbiAgICAgIGpRdWVyeTogJ2pxdWVyeScsXG4gICAgICAnd2luZG93LmpRdWVyeSc6ICdqcXVlcnknLFxuICAgICAgUG9wcGVyOiBbJ3BvcHBlci5qcycsICdkZWZhdWx0J11cbiAgICB9KVxuICBdLFxuICBtb2R1bGU6IHtcbiAgICBydWxlczogW1xuICAgICAge1xuICAgICAgICB0ZXN0OiAvXFwuY3NzJC8sXG4gICAgICAgIHVzZTogWydzdHlsZS1sb2FkZXInLCAnY3NzLWxvYWRlciddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdGVzdDogL1xcLihqc3xqc3gpJC8sXG4gICAgICAgIGV4Y2x1ZGU6IC9ub2RlX21vZHVsZXMvLFxuICAgICAgICB1c2U6IHtcbiAgICAgICAgICBsb2FkZXI6ICdiYWJlbC1sb2FkZXInXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRlc3Q6IC9cXC5odG1sJC8sXG4gICAgICAgIHVzZToge1xuICAgICAgICAgIGxvYWRlcjogJ2h0bWwtbG9hZGVyJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9XG59Il19